type UserLevel = 
 variant {
   junior;
   novice;
   senior1;
   senior2;
   senior3;
 };
type UserAndVote = 
 record {
   decision: Decision;
   userId: principal;
   votedCorrect: bool;
 };
type UserAndRS = 
 record {
   score: int;
   userId: principal;
 };
type Result = 
 variant {
   err: text;
   ok: bool;
 };
type RSManager = 
 service {
   handleSubscription: (ConsumerPayload) -> ();
   queryRSAndLevel: () -> (RSAndLevel) query;
   queryRSAndLevelByPrincipal: (principal) -> (RSAndLevel) query;
   setRS: (principal, int) -> (Result);
   showAdmins: () -> (vec principal) query;
   subscribe: (text) -> ();
   topUsers: (nat, nat) -> (vec UserAndRS) query;
   updateRS: (principal, bool, Decision) -> (UserAndRS);
   updateRSBulk: (vec UserAndVote) -> (vec UserAndRS);
 };
type RSAndLevel = 
 record {
   level: UserLevel;
   score: int;
 };
type Event = 
 record {
   payload: principal;
   topic: text;
 };
type ENV = 
 record {
   auth_canister_id: principal;
   modclub_canister_id: principal;
   old_modclub_canister_id: principal;
   rs_canister_id: principal;
   vesting_canister_id: principal;
   wallet_canister_id: principal;
 };
type Decision = 
 variant {
   approved;
   rejected;
 };
type ConsumerPayload = 
 variant {
   admins: vec principal;
   events: vec Event;
 };
service : (ENV) -> RSManager
