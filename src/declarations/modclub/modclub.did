type VoteId = text;
type Vote = 
 record {
   contentId: text;
   createdAt: Timestamp;
   decision: Decision__1;
   id: VoteId;
   userId: UserId;
   violatedRules: opt vec RuleId;
 };
type UserId = principal;
type Timestamp = int;
type SubscribeMessage = record {callback: func (ContentResult) -> () oneway;};
type RuleId = text;
type Rule = 
 record {
   description: text;
   id: RuleId;
 };
type Role = 
 variant {
   admin;
   moderator;
   owner;
 };
type Result = 
 variant {
   err: ProviderError;
   ok: text;
 };
type ProviderSettings = 
 record {
   minStaked: nat;
   minVotes: nat;
 };
type ProviderSettingResult = 
 variant {
   err: ProviderError;
   ok: ProviderSettings;
 };
type ProviderResult = 
 variant {
   err: ProviderError;
   ok;
 };
type ProviderRegisterResult = 
 variant {
   err: ProviderError;
   ok: text;
 };
type ProviderPlus = 
 record {
   activeCount: nat;
   contentCount: nat;
   createdAt: Timestamp;
   description: text;
   id: principal;
   image: opt Image__1;
   name: text;
   rewardsSpent: nat;
   rules: vec Rule;
   settings: ProviderSettings;
   updatedAt: Timestamp;
 };
type ProviderId = principal;
type ProviderError = 
 variant {
   InvalidContentStatus;
   InvalidContentType;
   InvalidProvider;
   NotFound;
   ProviderIsRegistered;
   RequiresWhitelisting;
   Unauthorized;
 };
type Profile = 
 record {
   createdAt: Timestamp;
   email: text;
   id: UserId;
   pic: opt Image__1;
   role: Role;
   updatedAt: Timestamp;
   userName: text;
 };
type ModClub = 
 service {
   addProviderAdmin: (text, principal, opt principal) -> (ProviderResult);
   addRules: (vec text) -> (ProviderResult);
   airdropRegister: () -> (AirdropUser);
   checkUsernameAvailable: (text) -> (bool) query;
   deregisterProvider: () -> (Result);
   getActivity: (bool) -> (vec Activity) query;
   getAirdropUsers: () -> (vec AirdropUser);
   getAllContent: (ContentStatus) -> (vec ContentPlus) query;
   getAllProfiles: () -> (vec Profile) query;
   getContent: (text) -> (opt ContentPlus) query;
   getModclubHoldings: () -> (Holdings) query;
   getProfile: () -> (Profile) query;
   getProvider: (principal) -> (ProviderPlus) query;
   getProviderContent: () -> (vec ContentPlus) query;
   getProviders: () -> (vec ProviderPlus);
   getRules: (principal) -> (vec Rule) query;
   getSettings: () -> (ProviderSettingResult);
   getTokenHoldings: () -> (Holdings) query;
   isAirdropRegistered: () -> (AirdropUser);
   registerModerator: (text, text, opt Image) -> (Profile);
   registerProvider: (text, text, opt Image) -> (ProviderRegisterResult);
   removeRules: (vec RuleId) -> (ProviderResult);
   stakeTokens: (nat) -> (text);
   submitImage: (text, vec nat8, text, opt text) -> (Result);
   submitText: (text, text, opt text) -> (Result);
   subscribe: (SubscribeMessage) -> (ProviderResult);
   unStakeTokens: (nat) -> (text);
   updateSettings: (ProviderSettings) -> (ProviderResult);
   vote: (ContentId, Decision, opt vec RuleId) -> (text);
   whiteListProvider: (principal) -> ();
 };
type Image__1 = 
 record {
   data: vec nat8;
   imageType: text;
 };
type Image = 
 record {
   data: vec nat8;
   imageType: text;
 };
type Holdings = 
 record {
   pendingRewards: int;
   stake: int;
   wallet: int;
 };
type Decision__1 = 
 variant {
   approved;
   rejected;
 };
type Decision = 
 variant {
   approved;
   rejected;
 };
type ContentType = 
 variant {
   imageBlob;
   imageUrl;
   multiText;
   "text";
 };
type ContentStatus = 
 variant {
   approved;
   new;
   rejected;
 };
type ContentResult = 
 record {
   sourceId: text;
   status: ContentStatus;
 };
type ContentPlus = 
 record {
   contentType: ContentType;
   createdAt: Timestamp;
   id: ContentId__1;
   image: opt Image__1;
   minStake: nat;
   minVotes: nat;
   providerId: principal;
   providerName: text;
   sourceId: text;
   status: ContentStatus;
   "text": opt text;
   title: opt text;
   updatedAt: Timestamp;
   voteCount: nat;
 };
type ContentId__1 = text;
type ContentId = text;
type AirdropUser = 
 record {
   createdAt: Timestamp;
   id: principal;
 };
type Activity = 
 record {
   contentType: ContentType;
   createdAt: Timestamp;
   minStake: nat;
   minVotes: nat;
   providerId: ProviderId;
   providerName: text;
   reward: nat;
   rewardRelease: Timestamp;
   status: ContentStatus;
   title: opt text;
   updatedAt: Timestamp;
   vote: Vote;
   voteCount: nat;
 };
service : () -> ModClub
