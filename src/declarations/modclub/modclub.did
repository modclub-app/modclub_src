type Timestamp = int;
type SubscribeMessage = record {callback: func (ContentResult) -> () oneway;};
type ModClub = 
 service {
   addToWaitList: (text) -> (text);
   deregisterProvider: () -> (text);
   getAllContent: (ContentStatus) -> (vec ContentPlus) query;
   getContent: (text) -> (opt Content) query;
   getProviderContent: () -> (vec ContentPlus) query;
   getWaitList: () -> (vec text);
   registerModerator: (text, opt text) -> (text);
   registerProvider: (text) -> (text);
   submitText: (text, text, opt text) -> (text);
   subscribe: (SubscribeMessage) -> ();
   vote: (ContentId, Decision) -> (text);
 };
type Decision = 
 variant {
   approved;
   rejected;
 };
type ContentType = 
 variant {
   imageBlob;
   imageUrl;
   multiText;
   "text";
 };
type ContentStatus = 
 variant {
   approved;
   new;
   rejected;
 };
type ContentResult = 
 record {
   sourceId: text;
   status: ContentStatus;
 };
type ContentPlus = 
 record {
   contentType: ContentType;
   createdAt: Timestamp;
   id: ContentId__1;
   sourceId: text;
   status: ContentStatus;
   "text": opt text;
   title: opt text;
   updatedAt: Timestamp;
 };
type ContentId__1 = text;
type ContentId = text;
type Content = 
 record {
   contentType: ContentType;
   createdAt: Timestamp;
   id: ContentId__1;
   providerId: principal;
   sourceId: text;
   status: ContentStatus;
   title: opt text;
   updateAt: Timestamp;
 };
service : () -> ModClub
